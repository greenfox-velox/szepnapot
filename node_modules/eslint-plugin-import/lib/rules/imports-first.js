'use strict';

module.exports = function (context) {
  function isPossibleDirective(node) {
    return node.type === 'ExpressionStatement' && node.expression.type === 'Literal' && typeof node.expression.value === 'string';
  }

  return {
    'Program': function (n) {
      const body = n.body,
            absoluteFirst = context.options[0] === 'absolute-first';
      let nonImportCount = 0,
          anyExpressions = false,
          anyRelative = false;
      body.forEach(function (node) {
        if (!anyExpressions && isPossibleDirective(node)) {
          return;
        }

        anyExpressions = true;

        if (node.type === 'ImportDeclaration') {
          if (absoluteFirst) {
            if (/^\./.test(node.source.value)) {
              anyRelative = true;
            } else if (anyRelative) {
              context.report({
                node: node.source,
                message: 'Absolute imports should come before relative imports.'
              });
            }
          }
          if (nonImportCount > 0) {
            context.report({
              node,
              message: 'Import in body of module; reorder to top.'
            });
          }
        } else {
          nonImportCount++;
        }
      });
    }
  };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzL2ltcG9ydHMtZmlyc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLE9BQVAsR0FBaUIsVUFBVSxPQUFWLEVBQW1CO0FBQ2xDLFdBQVMsbUJBQVQsQ0FBOEIsSUFBOUIsRUFBb0M7QUFDbEMsV0FBTyxLQUFLLElBQUwsS0FBYyxxQkFBZCxJQUNMLEtBQUssVUFBTCxDQUFnQixJQUFoQixLQUF5QixTQUF6QixJQUNBLE9BQU8sS0FBSyxVQUFMLENBQWdCLEtBQWhCLEtBQTBCLFFBQWpDLENBSGdDO0dBQXBDOztBQU1BLFNBQU87QUFDTCxlQUFXLFVBQVUsQ0FBVixFQUFhO0FBQ3RCLFlBQU0sT0FBTyxFQUFFLElBQUY7WUFDUCxnQkFBZ0IsUUFBUSxPQUFSLENBQWdCLENBQWhCLE1BQXVCLGdCQUF2QixDQUZBO0FBR3RCLFVBQUksaUJBQWlCLENBQWpCO1VBQ0EsaUJBQWlCLEtBQWpCO1VBQ0EsY0FBYyxLQUFkLENBTGtCO0FBTXRCLFdBQUssT0FBTCxDQUFhLFVBQVUsSUFBVixFQUFlO0FBQzFCLFlBQUksQ0FBQyxjQUFELElBQW1CLG9CQUFvQixJQUFwQixDQUFuQixFQUE4QztBQUNoRCxpQkFEZ0Q7U0FBbEQ7O0FBSUEseUJBQWlCLElBQWpCLENBTDBCOztBQU8xQixZQUFJLEtBQUssSUFBTCxLQUFjLG1CQUFkLEVBQW1DO0FBQ3JDLGNBQUksYUFBSixFQUFtQjtBQUNqQixnQkFBSSxNQUFNLElBQU4sQ0FBVyxLQUFLLE1BQUwsQ0FBWSxLQUFaLENBQWYsRUFBbUM7QUFDakMsNEJBQWMsSUFBZCxDQURpQzthQUFuQyxNQUVPLElBQUksV0FBSixFQUFpQjtBQUN0QixzQkFBUSxNQUFSLENBQWU7QUFDYixzQkFBTSxLQUFLLE1BQUw7QUFDTix5QkFBUyx1REFBVDtlQUZGLEVBRHNCO2FBQWpCO1dBSFQ7QUFVQSxjQUFJLGlCQUFpQixDQUFqQixFQUFvQjtBQUN0QixvQkFBUSxNQUFSLENBQWU7QUFDYixrQkFEYTtBQUViLHVCQUFTLDJDQUFUO2FBRkYsRUFEc0I7V0FBeEI7U0FYRixNQWlCTztBQUNMLDJCQURLO1NBakJQO09BUFcsQ0FBYixDQU5zQjtLQUFiO0dBRGIsQ0FQa0M7Q0FBbkIiLCJmaWxlIjoicnVsZXMvaW1wb3J0cy1maXJzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgZnVuY3Rpb24gaXNQb3NzaWJsZURpcmVjdGl2ZSAobm9kZSkge1xuICAgIHJldHVybiBub2RlLnR5cGUgPT09ICdFeHByZXNzaW9uU3RhdGVtZW50JyAmJlxuICAgICAgbm9kZS5leHByZXNzaW9uLnR5cGUgPT09ICdMaXRlcmFsJyAmJlxuICAgICAgdHlwZW9mIG5vZGUuZXhwcmVzc2lvbi52YWx1ZSA9PT0gJ3N0cmluZydcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgJ1Byb2dyYW0nOiBmdW5jdGlvbiAobikge1xuICAgICAgY29uc3QgYm9keSA9IG4uYm9keVxuICAgICAgICAgICwgYWJzb2x1dGVGaXJzdCA9IGNvbnRleHQub3B0aW9uc1swXSA9PT0gJ2Fic29sdXRlLWZpcnN0J1xuICAgICAgbGV0IG5vbkltcG9ydENvdW50ID0gMFxuICAgICAgICAsIGFueUV4cHJlc3Npb25zID0gZmFsc2VcbiAgICAgICAgLCBhbnlSZWxhdGl2ZSA9IGZhbHNlXG4gICAgICBib2R5LmZvckVhY2goZnVuY3Rpb24gKG5vZGUpe1xuICAgICAgICBpZiAoIWFueUV4cHJlc3Npb25zICYmIGlzUG9zc2libGVEaXJlY3RpdmUobm9kZSkpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGFueUV4cHJlc3Npb25zID0gdHJ1ZVxuICAgICAgICAgXG4gICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdJbXBvcnREZWNsYXJhdGlvbicpIHtcbiAgICAgICAgICBpZiAoYWJzb2x1dGVGaXJzdCkge1xuICAgICAgICAgICAgaWYgKC9eXFwuLy50ZXN0KG5vZGUuc291cmNlLnZhbHVlKSkge1xuICAgICAgICAgICAgICBhbnlSZWxhdGl2ZSA9IHRydWVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYW55UmVsYXRpdmUpIHtcbiAgICAgICAgICAgICAgY29udGV4dC5yZXBvcnQoe1xuICAgICAgICAgICAgICAgIG5vZGU6IG5vZGUuc291cmNlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdBYnNvbHV0ZSBpbXBvcnRzIHNob3VsZCBjb21lIGJlZm9yZSByZWxhdGl2ZSBpbXBvcnRzLicsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChub25JbXBvcnRDb3VudCA+IDApIHtcbiAgICAgICAgICAgIGNvbnRleHQucmVwb3J0KHtcbiAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ0ltcG9ydCBpbiBib2R5IG9mIG1vZHVsZTsgcmVvcmRlciB0byB0b3AuJyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vbkltcG9ydENvdW50KytcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICB9XG59XG4iXX0=