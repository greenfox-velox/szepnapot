var should = require('should');
var assert = require('assert');
var request = require('supertest');
var winston = require('winston');
var config = require('./config');

describe('Routing', function() {
  var url = 'http://localhost:3000';

  before(function(done) {
    var testTask = {text: "test", completed: "false"}
    request(url)
    .post('/todos')
    .send(testTask)

    .end(function(err, res) {
      if (err) {
        throw err;
      }
    done();
  });
})
  describe('DELETE', function() {
    var testTask = {text: "test", completed: "false"}
    it('status should be 200', function(done) {
      request(url)
    	.delete('/todos/1')
    	.send()

    	.end(function(err, res) {
        if (err) {
          throw err;
        }
        should(res).have.property('status', 200);
        done();
      });
    });

    it('should send response', function(done) {
      request(url)
      .delete('/todos/1')
      .send()

      .end(function(err, res) {
        if (err) {
          throw err;
        }
        assert.ok(res);
        done();
      });
    });

    it('response should contain property "destroyed" with value "true"', function(done) {
      request(url)
      .delete('/todos/1')
      .send()

      .end(function(err, res) {
        if (err) {
          throw err;
        }
        res.body.should.have.property('destroyed');
        res.body.destroyed.should.equal(true);
        done();
      });
    });

    it('response should contain the full object', function(done) {
      var testTask = {text: "test", completed: "false"}
      request(url)
      .delete('/todos/1')
      .send(testTask)

      .end(function(err, res) {
        if (err) {
          throw err;
        }
        res.body.should.have.property('destroyed');
        res.body.should.have.property('id');
        res.body.should.have.property('text');
        res.body.should.have.property('completed');
        done();
      });
    });

    it('should send 404 if id not found', function(done) {
      var testTask = {text: "test", completed: "false"}
      request(url)
      .delete('/todos/999999')
      .send(testTask)

      .end(function(err, res) {
        if (err) {
          throw err;
        }
        should(res).have.property('status', 404);
        done();
      });
    });

  });
});
